{"remainingRequest":"C:\\Users\\alfon\\Desktop\\Faculdade\\ESMAD\\2-Ano\\Projeto-EmoChamp\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\alfon\\Desktop\\Faculdade\\ESMAD\\2-Ano\\Projeto-EmoChamp\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!C:\\Users\\alfon\\Desktop\\Faculdade\\ESMAD\\2-Ano\\Projeto-EmoChamp\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\alfon\\Desktop\\Faculdade\\ESMAD\\2-Ano\\Projeto-EmoChamp\\src\\views\\Home.vue?vue&type=template&id=fae5bece&","dependencies":[{"path":"C:\\Users\\alfon\\Desktop\\Faculdade\\ESMAD\\2-Ano\\Projeto-EmoChamp\\src\\views\\Home.vue","mtime":1642009519454},{"path":"C:\\Users\\alfon\\Desktop\\Faculdade\\ESMAD\\2-Ano\\Projeto-EmoChamp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1641926723310},{"path":"C:\\Users\\alfon\\Desktop\\Faculdade\\ESMAD\\2-Ano\\Projeto-EmoChamp\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1641926734602},{"path":"C:\\Users\\alfon\\Desktop\\Faculdade\\ESMAD\\2-Ano\\Projeto-EmoChamp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1641926723310},{"path":"C:\\Users\\alfon\\Desktop\\Faculdade\\ESMAD\\2-Ano\\Projeto-EmoChamp\\node_modules\\vue-loader\\lib\\index.js","mtime":1641926734600}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}