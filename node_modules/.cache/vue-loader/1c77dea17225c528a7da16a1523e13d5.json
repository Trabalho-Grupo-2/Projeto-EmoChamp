{"remainingRequest":"C:\\Users\\andre\\Desktop\\emochamp\\Projeto-EmoChamp\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\andre\\Desktop\\emochamp\\Projeto-EmoChamp\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!C:\\Users\\andre\\Desktop\\emochamp\\Projeto-EmoChamp\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\andre\\Desktop\\emochamp\\Projeto-EmoChamp\\src\\views\\Register.vue?vue&type=template&id=63ae9146&scoped=true&","dependencies":[{"path":"C:\\Users\\andre\\Desktop\\emochamp\\Projeto-EmoChamp\\src\\views\\Register.vue","mtime":1641990904961},{"path":"C:\\Users\\andre\\Desktop\\emochamp\\Projeto-EmoChamp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1641906904248},{"path":"C:\\Users\\andre\\Desktop\\emochamp\\Projeto-EmoChamp\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1641906919138},{"path":"C:\\Users\\andre\\Desktop\\emochamp\\Projeto-EmoChamp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1641906904248},{"path":"C:\\Users\\andre\\Desktop\\emochamp\\Projeto-EmoChamp\\node_modules\\vue-loader\\lib\\index.js","mtime":1641906919136},{"path":"C:\\Users\\andre\\Desktop\\emochamp\\Projeto-EmoChamp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1641906904248},{"path":"C:\\Users\\andre\\Desktop\\emochamp\\Projeto-EmoChamp\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1641906919138},{"path":"C:\\Users\\andre\\Desktop\\emochamp\\Projeto-EmoChamp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1641906904248},{"path":"C:\\Users\\andre\\Desktop\\emochamp\\Projeto-EmoChamp\\node_modules\\vue-loader\\lib\\index.js","mtime":1641906919136}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}